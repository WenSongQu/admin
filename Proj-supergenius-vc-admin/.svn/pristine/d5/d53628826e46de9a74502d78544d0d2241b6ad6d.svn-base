package com.supergenius.admin.capital.controller;

import com.alibaba.druid.support.json.JSONUtils;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.api.R;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.supergenius.admin.capital.model.vo.VCFiltrateVO;
import com.supergenius.admin.capital.model.vo.VCInvoicePrintVO;
import com.supergenius.admin.capital.model.vo.VCMemberOrderDisplayVO;
import com.supergenius.admin.capital.model.vo.VCOrderinfoVO;
import com.supergenius.admin.capital.service.IVCOrdersService;
import com.supergenius.admin.utils.EntityUtils;
import com.supergenius.admin.utils.ErrorCode;
import com.supergenius.admin.utils.ExcelUtils;
import com.supergenius.admin.utils.JsonUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Api("会员订单")
@RestController
@RequestMapping("/memberOrder")
public class MemberOrderController {
    @Autowired
    IVCOrdersService ivcOrdersService;


    @ApiOperation("获取会员订单列表")
    @GetMapping("/list/{pageNum}")
    @ApiImplicitParams({
            @ApiImplicitParam(name ="pageNum",value = "页数",required = true,paramType = "path",dataType = "Integer"),
            @ApiImplicitParam(name = "filtrate",value = "过滤条件",paramType = "query",dataType = "String")
    })
    public R<IPage<VCMemberOrderDisplayVO> > getMemberOrderDisplay( @RequestParam(name = "filtrate") String filtrateStr, @PathVariable int pageNum) {
        log.info(filtrateStr+"--------------");
        VCFiltrateVO vcFiltrateVO = JSON.parseObject(filtrateStr, VCFiltrateVO.class);
        log.info(vcFiltrateVO+"--------------");
        IPage<VCMemberOrderDisplayVO> vcMemberOrderDisplayDOIPage = ivcOrdersService.selectMemberOrderDisplayDO(new Page(pageNum, 10), vcFiltrateVO);
        if(vcMemberOrderDisplayDOIPage.getRecords().size()>0){
            return R.ok(vcMemberOrderDisplayDOIPage).setCode(200);
        }
        return R.failed(new ErrorCode(401));
    }

    @ApiOperation("获取会员订单通过oid")
    @GetMapping("/{oid}")
    @ApiImplicitParam(name = "oid",value = "订单uid",paramType = "path",dataType = "String")
    public R<VCOrderinfoVO> getMemberOrderByOid(@PathVariable("oid") String oid) {
        VCOrderinfoVO vcOrderinfo = ivcOrdersService.selectOrderInfo(oid);
        if(vcOrderinfo!=null){
            return  R.ok(vcOrderinfo).setCode(200);
        }
        return R.failed(new ErrorCode(401));
    }

    @ApiOperation("开票操作")
    @ApiImplicitParam(name = "oids", value = "订单uid", allowMultiple = true, dataType = "String",paramType = "query")
    @PutMapping("/invoice")
    public R<String> invoiceOids(String... oids) {
        ivcOrdersService.invoiceed(Arrays.asList(oids));
        return R.ok("success").setCode(200);
    }

    @ApiOperation("导出excel")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "oids", value = "订单编号", allowMultiple = true, dataType = "String",paramType = "query"),
            @ApiImplicitParam(name = "path", value = "路径", dataType = "String"),
            @ApiImplicitParam(name = "fileName", value = "文件名称", dataType = "String")
    })
    @PostMapping("/Excel")
    public R<Boolean> printExcel(String path, String fileName, String... oids) {
        List<VCInvoicePrintVO> vcInvoicePrintDO = ivcOrdersService.getVCInvoicePrintDO(Arrays.asList(oids));
        List<List<String>> lists = EntityUtils.entityToListToList(vcInvoicePrintDO);
        List<String> list = Arrays.asList("序号", "订单编号", "手机号/邮箱", "支付时间", "支付金额", "最晚开票时间", "发票抬头", "发票类型", "发票内容", "单位名称", "单位税号", "电子邮箱", "电话", "收件人", "地址");
        boolean result = ExcelUtils.createWorkBook("2007", "sheet", list, lists, path + "/" + fileName + "xlsx");
        return result?R.ok(result).setCode(200): R.failed(new ErrorCode(401));

    }

}
