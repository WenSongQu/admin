package com.supergenius.admin.capital.controller;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.api.IErrorCode;
import com.baomidou.mybatisplus.extension.api.R;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.supergenius.admin.capital.model.VCInvoicePrintDO;
import com.supergenius.admin.capital.model.VCMemberOrderDisplayDO;
import com.supergenius.admin.capital.model.VCOrderinfo;
import com.supergenius.admin.capital.model.VCUserinfoDO;
import com.supergenius.admin.capital.service.IVCOrdersService;
import com.supergenius.admin.utils.EntityUtils;
import com.supergenius.admin.utils.ErrorCode;
import com.supergenius.admin.utils.ExcelUtils;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

@Api("会员订单")
@RestController
public class MemberOrderController {
    @Autowired
    IVCOrdersService ivcOrdersService;


    @ApiOperation("获取会员订单列表")
    @GetMapping("/getMemberOrderDisplay")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "第几页", defaultValue = "1", dataType = "Integer"),
            @ApiImplicitParam(name = "pageCount", value = "每页显示的数据", defaultValue = "10", dataType = "Integer"),
            @ApiImplicitParam(name = "map", value = "筛选条件", defaultValue = "null", dataType = "Map")
    })
    public R<IPage<VCMemberOrderDisplayDO> > getMemberOrderDisplay(@RequestParam(required = false, defaultValue = "1") Integer pageNum, @RequestParam(required = false, defaultValue = "10") Integer pageCount, @RequestParam(required = false) Map<String, Object> map) {
        IPage<VCMemberOrderDisplayDO> vcMemberOrderDisplayDOIPage = ivcOrdersService.selectMemberOrderDisplayDO(new Page(pageNum, pageCount), map);
        if(vcMemberOrderDisplayDOIPage.getRecords().size()>0){
            return R.ok(vcMemberOrderDisplayDOIPage).setCode(200);
        }
        return R.failed(new ErrorCode(401));
    }

    @ApiOperation("获取会员订单通过oid")
    @ApiImplicitParam(name = "oid", value = "订单编号", dataType = "String")
    @GetMapping("/getMemberOrderByOid/{oid}")
    public R<VCOrderinfo> getMemberOrderByOid(@PathVariable("oid") String oid) {
        VCOrderinfo vcOrderinfo = ivcOrdersService.selectOrderInfo(oid);
        if(vcOrderinfo!=null){
            return  R.ok(vcOrderinfo).setCode(200);
        }
        return R.failed(new ErrorCode(401));
    }

    @ApiOperation("开票操作")
    @ApiImplicitParam(name = "oids", value = "订单编号", allowMultiple = true, dataType = "String")
    @PutMapping("/invoiceMemberOrders")
    public R<String> invoiceOids(String... oids) {
        ivcOrdersService.invoiceed(Arrays.asList(oids));
        return R.ok("success").setCode(200);
    }

    @ApiOperation("导出excel")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "oids", value = "订单编号", allowMultiple = true, dataType = "String"),
            @ApiImplicitParam(name = "path", value = "路径", dataType = "String"),
            @ApiImplicitParam(name = "fileName", value = "文件名称", dataType = "String")
    })
    @PostMapping("/printExcel")
    public R<Boolean> printExcel(String path, String fileName, String... oids) {
        List<VCInvoicePrintDO> vcInvoicePrintDO = ivcOrdersService.getVCInvoicePrintDO(Arrays.asList(oids));
        List<List<String>> lists = EntityUtils.entityToListToList(vcInvoicePrintDO);
        List<String> list = Arrays.asList("序号", "订单编号", "手机号/邮箱", "支付时间", "支付金额", "最晚开票时间", "发票抬头", "发票类型", "发票内容", "单位名称", "单位税号", "电子邮箱", "电话", "收件人", "地址");
        boolean result = ExcelUtils.createWorkBook("2007", "sheet", list, lists, path + "/" + fileName + "xlsx");
        return result?R.ok(result).setCode(200): R.failed(new ErrorCode(401));

    }

}
